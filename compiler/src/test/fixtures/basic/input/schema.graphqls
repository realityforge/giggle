schema {
  query: Query
  mutation: Mutation
}

type Query {
  event(id: ID!): Event

  # Use a query arg named "args" that would clash with the generated name if it was not prefixed
  eventByArgs(args: [String!]!): Event
}

type Mutation {
  createEvent(clientMutationId: String = null, event: EventInput!): CreateEventResponse
}

scalar Date

"""Classification of Event"""
enum EventType {
  Wildfire
  """
  A wildfire set intentionally for purposes of forest management, farming, prairie restoration or greenhouse gas abatement.
  """
  Burn
  """A flood is an overflow of water that submerges land that is usually dry."""
  FloodOrStorm
  RegenBurn @deprecated(reason: "Use `Burn`.")
}

input EventInput {
  name: String!
  type: EventType!
  startedAt: Date
}

input ObservationInput {
  type: String!
  value: Int!
}

input ObservationsInput {
  name: String!
  type: [ObservationInput!]!
}

type CreateEventResponse {
  clientMutationId: String
  event: Event!
}

type Event {
  id: ID!
  name: String
  type: EventType
  startedAt: Date
}
